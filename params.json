{"name":"Mvc Pagination For SEO","tagline":"","body":"\r\n## Examples\r\n\r\n### Example 1\r\n\r\nPagination With Ajax Load\r\n\r\nC#\r\n```C#\r\n@using MVCPagination.Components\r\n@{\r\n    var modelPaginning = new Pagination.ModelPaginning();\r\n    modelPaginning.Id = \"mvc-pagination\";\r\n    modelPaginning.TotalPages = 50;\r\n    modelPaginning.StartPage =  Convert.ToInt32(!String.IsNullOrEmpty(Request[\"page\"]) ? Request[\"page\"].ToString() : \"1\");\r\n    modelPaginning.VisiblePages = 5;\r\n    modelPaginning.First = \"Primeiro\";\r\n    modelPaginning.Prev = \"Anterior\";\r\n    modelPaginning.Next = \"Próximo\";\r\n    modelPaginning.Last = \"Último\";\r\n    modelPaginning.Href = \"?page={{pagenumber}}\";\r\n    modelPaginning.ShowControl = true;\r\n    modelPaginning.ShowPrevNext = true;\r\n    modelPaginning.ShowFirstLast = true;\r\n    modelPaginning.HrefVariable = \"{{pagenumber}}\";\r\n}\r\n\r\n@using (Html.MVCPagination(modelPaginning)){ }\r\n```\r\n\r\nJs\r\n\r\n```javascript\r\n    <script>\r\n    $('.mvc-pagination').mvcPagination({\r\n        totalPages: @Html.Raw(modelPaginning.TotalPages),\r\n        visiblePages: @Html.Raw(modelPaginning.VisiblePages),\r\n        href: \"@Html.Raw(modelPaginning.Href)\",\r\n        startPage: @Html.Raw(modelPaginning.StartPage),\r\n        first: \"@Html.Raw(modelPaginning.First)\",\r\n        prev: \"@Html.Raw(modelPaginning.Prev)\",\r\n        next: \"@Html.Raw(modelPaginning.Next)\",\r\n        last: \"@Html.Raw(modelPaginning.Last)\",\r\n        showPrevNext: @Html.Raw(modelPaginning.ShowPrevNext.ToString().ToLower()),\r\n        showFirstLast: @Html.Raw(modelPaginning.ShowFirstLast.ToString().ToLower()),\r\n        showControl: @Html.Raw(modelPaginning.ShowControl.ToString().ToLower()),\r\n        hrefVariable: \"@Html.Raw(modelPaginning.HrefVariable)\",\r\n        onClick: function (event, page) {\r\n            $.ajax({ url: \"test.html?page=\"+ page, cache: false }).done(function(html) {  $( \"#results\" ).append(html);});\r\n        }\r\n    });\r\n    </script>\r\n```\r\n\r\n\r\n\r\n### Example 2\r\n\r\nPagination Without Ajax Load\r\n\r\nC#\r\n```C#\r\n@using MVCPagination.Components\r\n@{\r\n    var modelPaginning = new Pagination.ModelPaginning();\r\n    modelPaginning.Id = \"mvc-pagination\";\r\n    modelPaginning.TotalPages = 50;\r\n    modelPaginning.StartPage =  Convert.ToInt32(!String.IsNullOrEmpty(Request[\"page\"]) ? Request[\"page\"].ToString() : \"1\");\r\n    modelPaginning.VisiblePages = 5;\r\n    modelPaginning.First = \"Primeiro\";\r\n    modelPaginning.Prev = \"Anterior\";\r\n    modelPaginning.Next = \"Próximo\";\r\n    modelPaginning.Last = \"Último\";\r\n    modelPaginning.Href = \"?page={{pagenumber}}\";\r\n    modelPaginning.ShowControl = true;\r\n    modelPaginning.ShowPrevNext = true;\r\n    modelPaginning.ShowFirstLast = true;\r\n    modelPaginning.HrefVariable = \"{{pagenumber}}\";\r\n}\r\n\r\n@using (Html.MVCPagination(modelPaginning)){ }\r\n```\r\n\r\nJs\r\n\r\n```javascript\r\n    <script>\r\n    $('.mvc-pagination').mvcPagination({\r\n        totalPages: @Html.Raw(modelPaginning.TotalPages),\r\n        visiblePages: @Html.Raw(modelPaginning.VisiblePages),\r\n        href: \"@Html.Raw(modelPaginning.Href)\",\r\n        startPage: @Html.Raw(modelPaginning.StartPage),\r\n        first: \"@Html.Raw(modelPaginning.First)\",\r\n        prev: \"@Html.Raw(modelPaginning.Prev)\",\r\n        next: \"@Html.Raw(modelPaginning.Next)\",\r\n        last: \"@Html.Raw(modelPaginning.Last)\",\r\n        showPrevNext: @Html.Raw(modelPaginning.ShowPrevNext.ToString().ToLower()),\r\n        showFirstLast: @Html.Raw(modelPaginning.ShowFirstLast.ToString().ToLower()),\r\n        showControl: @Html.Raw(modelPaginning.ShowControl.ToString().ToLower()),\r\n        hrefVariable: \"@Html.Raw(modelPaginning.HrefVariable)\"\r\n    });\r\n    </script>\r\n```\r\n\r\n## Available Options\r\n\r\nThe following list describes what options you have for the option object:\r\n\r\n* **Id**: Id of the pagination container (a DOM element)\r\n\r\n* **TotalPages:** The number of items per page. The maximum number of pages is calculated by dividing the number of items by items_per_page (rounded up, minimum 1). Please note: This value is only for calculating the number of pages. The actual selection of the items correlating to the current page and number of items must be done by your code in your callback function! Default: 0\r\n\r\n* **StartPage**: The page that is selected when the pagination is initialized. Default: 1\r\n\r\n* **VisiblePages**: Maximum number of pagination links that are visible. Default: 5\r\n\r\n* **First**: Text for the \"First\"-link that go to first page number. Default: First\r\n\r\n* **Last**: Text for the \"Last\"-link that go to last page number. Default: First\r\n\r\n* Prev**: Text for the \"Previous\"-link that decreases the current page number by 1. Default: Previous\r\n\r\n* **Next**: Text for the \"Next\"-link that increases the current page number by 1. Default: Next\r\n\r\n* **Href: Link target of the pagination links.\r\n\r\n* **ShowControl**: If this is set to false, the Controls \"Previous|Next\" and \"First|Last\" don´t is show. Default: true\r\n\r\n* **ShowPrevNext**: If this is set to false, the \"Previous|Next\"-link is don´t is show. Default: true\r\n\r\n* **ShowFirstLast**: If this is set to false, the \"First|Last\"-link is don´t is show. Default: true\r\n\r\n* **HrefVariable**: Variable to definition of the page number. Default {{number}}\r\n\r\n## Available Class Config\r\n\r\n* **paginationClass**: The root style for pagination component (default: 'pagination'). You can use this option to apply your own style\r\n\r\n* **nextClass**: The style for next link (default: 'next'). You can use this option to apply your own style\r\n\r\n* **prevClass**: The style for prev link (default: 'prev'). You can use this option to apply your own style\r\n\r\n* **lastClass**: The style for last link (default: 'last'). You can use this option to apply your own style\r\n\r\n* **firstClass**: The style for first link (default: 'last'). You can use this option to apply your own style\r\n\r\n* **pageClass**: The style for page link (default: 'page'). You can use this option to apply your own style\r\n\r\n* **activeClass**: The style for actual page link (default: 'active'). You can use this option to apply your own style\r\n\r\n* **disabledClass**: The style for disabled link (default: 'disabled'). You can use this option to apply your own style\r\n\r\n## Available Events\r\n\r\n* **onClick**: A callback function that is called when a user clicks on a pagination link. The function receives two parameters: the new page index and the pagination container (a DOM element). If the callback returns false, the event propagation is stopped. Default value: function(){return false;}. This callback function is essential for the functionality of the pagination! It should contain code that updates your content.","google":"UA-55447723-1","note":"Don't delete this file! It's used internally to help with page regeneration."}